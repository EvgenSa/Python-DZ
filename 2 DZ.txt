Циклы, строки, списки

Задача
В Институте биоинформатики между информатиками и биологами устраивается соревнование. Победителям соревнования достанется большой и вкусный пирог. В команде биологов aa человек, а в команде информатиков — bb человек.

Нужно заранее разрезать пирог таким образом, чтобы можно было раздать кусочки пирога любой команде, выигравшей соревнование, при этом каждому участнику этой команды должно достаться одинаковое число кусочков пирога. И так как не хочется резать пирог на слишком мелкие кусочки, нужно найти минимальное подходящее число.

Напишите программу, которая помогает найти это число.
Программа должна считывать размеры команд (два положительных целых числа aa и bb, каждое число вводится на отдельной строке) и выводить наименьшее число dd, которое делится на оба этих числа без остатка.

Sample Input 1:

1
2
Решение
x = int(input())
y = int(input())
multiply_x = [i*x for i in range(1,x+1)]
multiply_y = [i*y for i in range(1,y+1)]
print(min([i for i in multiply_x if i in multiply_y]))
# print(min(set(multiply_x).intersection(multiply_y)))
или:
def multiply(a, b):
    m = a * b
    while a != 0 and b != 0:
        if a > b:
            a %= b
        else:
            b %= a
    print (m // (a + b))
multiply(9,12)

Задача 2
Когда Павел учился в школе, он запоминал таблицу умножения прямоугольными блоками. Для тренировок ему бы очень пригодилась программа, которая показывала бы блок таблицы умножения.

Напишите программу, на вход которой даются четыре числа aa, bb, cc и dd, каждое в своей строке. Программа должна вывести фрагмент таблицы умножения для всех чисел отрезка [a; b][a;b] на все числа отрезка [c;d][c;d].

Числа aa, bb, cc и dd являются натуральными и не превосходят 10, a \le ba≤b, c \le dc≤d.

Следуйте формату вывода из примера, для разделения элементов внутри строки используйте '\t' — символ табуляции. Заметьте, что левым столбцом и верхней строкой выводятся сами числа из заданных отрезков — заголовочные столбец и строка таблицы.

Решение:
a, b, c, d = (int(input()) for _ in range(4))
for  k in range(c,d+1):
    print("\t",k,  end="")
print()
for row in range(a, b + 1):
    print(row, end="    ")
    for column in range(c, d + 1):
        # print ( " ", column)
        print(row * column, end='\t')
    print()

Задача  3
Напишите программу, которая считывает с клавиатуры два числа aa и bb, считает и выводит на консоль среднее арифметическое всех чисел из отрезка [a; b][a;b], которые кратны числу 33.

В приведенном ниже примере среднее арифметическое считается для чисел на отрезке [-5; 12][−5;12]. Всего чисел, делящихся на 33, на этом отрезке 66: -3, 0, 3, 6, 9, 12−3,0,3,6,9,12. Их среднее арифметическое равно 4.54.5

На вход программе подаются интервалы, внутри которых всегда есть хотя бы одно число, которое делится на 33.﻿

Решение:
a, b = (int(input()) for _ in range(2))
print(sum(list(i for i in range(a,b+1) if i%3==0))/len(list(i for i in range(a,b+1) if i%3==0)))


Задача 4
Узнав, что ДНК не является случайной строкой, только что поступившие в Институт биоинформатики студенты группы информатиков предложили использовать алгоритм сжатия, который сжимает повторяющиеся символы в строке.

Кодирование осуществляется следующим образом:
s = 'aaaabbсaa' преобразуется в 'a4b2с1a2', то есть группы одинаковых символов исходной строки заменяются на этот символ и количество его повторений в этой позиции строки.

Напишите программу, которая считывает строку, кодирует её предложенным алгоритмом и выводит закодированную последовательность на стандартный вывод. Кодирование должно учитывать регистр символов.

Решение:

from itertools import groupby

test = input()
test = [''.join(g) for _, g in groupby(test)]
for i in test:
    print("".join(i[0]) + str(len(i)), end="")


Задача 5
Напишите программу, на вход которой подаётся список чисел одной строкой. Программа должна для каждого элемента этого списка вывести сумму двух его соседей. Для элементов списка, являющихся крайними, одним из соседей считается элемент, находящий на противоположном конце этого списка. Например, если на вход подаётся список "1 3 5 6 10", то на выход ожидается список "13 6 9 15 7" (без кавычек).

Если на вход пришло только одно число, надо вывести его же.

Вывод должен содержать одну строку с числами нового списка, разделёнными пробелом.

Решение:

number = [int(i) for i in input().split()]
if len(number) == 1: print(*number)
else:
    sum_neib = []
    for i in range(1, len(number)-1):
        sum_neib.append(number[i-1] + number[i+1])

    sum_neib = [number[1]+number[-1]] + sum_neib + [number[-2] + number[0]]
    print(*sum_neib, sep=" ")

Задача 6
Напишите программу, которая считывает с консоли числа (по одному в строке) до тех пор, пока сумма введённых чисел не будет равна 0 и сразу после этого выводит сумму квадратов всех считанных чисел.

Гарантируется, что в какой-то момент сумма введённых чисел окажется равной 0, после этого считывание продолжать не нужно.

В примере мы считываем числа 1, -3, 5, -6, -10, 13; в этот момент замечаем, что сумма этих чисел равна нулю и выводим сумму их квадратов, не обращая внимания на то, что остались ещё не прочитанные значения.

Решение

num_pow=[]
while True:
    num_pow+=[int(input())]
    if sum(num_pow)==0:
        break
print(sum(list(map(lambda x: x*x, num_pow))))